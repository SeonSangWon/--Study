1-1) STUDENT 이름으로 아래의 테이블을 생성하고 구조를 확인여라. (학생 테이블)
Create Table student201507046(
no char(9) NOT NULL,
name varchar2(12),
dept varchar2(20),
grade number(1),
class char(1),
gender char(1),
height number(5,2),
weight number(5,2),
Primary Key(no)
);

DESC student201507046;

1-2) 치환변수를 사용하여 아래와 같이 데이터를 입력하고, 입력된 데이터를 확인하여라.
INSERT INTO student
VALUES(&no, '&name', '&dept', &grade, '&class', '&gender', &height, &weight);

Select * From student;

--------------------------------------------------------------------------------------------------
2-1) SUBJECT 이름으로 아래의 테이블을 생성하고 구조를 확인하여라. (과목 테이블)
Create Table subject201507046(
subno char(3) not null,
subname varchar2(30),
subprof varchar2(12),
subcredit number(1),
subgrade number(1),
subdept varchar2(20),
Primary Key(subno)
);

DESC subject201507046;

2-2) 치환변수를 사용하여 아래와 같이 데이터를 입력하고, 입력된 데이터를 확인하여라.
Insert into subject201507046 
Values('&subno', '&subname', '&subprof', &subcredit, &subgrade, '&subdept');

Select * From subject201507046;

--------------------------------------------------------------------------------------------------
3. 1) ENROL 이름으로 아래의 테이블을 생성하고 구조를 확인하여라. (수강 테이블)
Create Table enrol201507046(
subno char(3) not null,
no char(9) not null,
grade number(3),
Constraint enrol201507046_subno_no_pk Primary Key(subno, no)
);

DESC enrol201507046;

2) 치환변수를 사용하여 아래와 같이 데이터를 입력하고, 입력된 데이터를 확인하여라.
Insert into enrol201507046 Values('&subno', '&no', &grade);

Select * From enrol201507046;

--------------------------------------------------------------------------------------------------
4. 점수가 입력되면 평점을 반환하는 함수를 작성하여라.
 - 단, 점수가 100점을 초과하거나, 0점 미만일 경우 -1.0을 반환한다.

1) 함수를 작성하여라
Create OR REPLACE FUNCTION f1_201507046(v_jumsu number)RETURN number
IS
	v_avgJumsu number;
BEGIN
	IF v_jumsu > 100 THEN
		v_avgJumsu := -1.0;
	ELSIF v_jumsu >= 95 THEN
		v_avgJumsu := 4.5;
	ELSIF v_jumsu >= 90 THEN
		v_avgJumsu := 4.0;
	ELSIF v_jumsu >= 85 THEN
		v_avgJumsu := 3.5;
	ELSIF v_jumsu >= 80 THEN
		v_avgJumsu := 3.0;	
	ELSIF v_jumsu >= 75 THEN
		v_avgJumsu := 2.5;
	ELSIF v_jumsu >= 70 THEN
		v_avgJumsu := 2.0;
	ELSIF v_jumsu >= 65 THEN
		v_avgJumsu := 1.5;
	ELSIF v_jumsu >= 60 THEN
		v_avgJumsu := 1.0;
	ELSIF v_jumsu  >= 0 THEN
		v_avgJumsu := 0;
	ELSE
		v_avgJumsu := -1.0;
	END IF;
RETURN v_avgJumsu;
END f1_201507046;
/

2) 점수 101을 입력하여 함수를 실행하고, 결과를 확인 하여라.
VARIABLE AVG NUMBER
EXEC :AVG := f1_201507046(101);

3) 점수 95를 입력하여 함수를 실행하고, 결과를 확인하여라.
EXEC :AVG := f1_201507046(95);

4) 점수 90을 입력하여 함수를 실행하고, 결과를 확인하여라.
EXEC :AVG := f1_201507046(90);

5) 2) 점수 85를 입력하여 함수를 실행하고, 결과를 확인하여라.
EXEC :AVG := f1_201507046(85);

6) 점수 80을 입력하여 함수를 실행하고, 결과를 확인하여라.
EXEC :AVG := f1_201507046(80);

7) 점수 75를 입력하여 함수를 실행하고, 결과를 확인하여라.
EXEC :AVG := f1_201507046(75);

8) 점수 70을 입력하여 함수를 실행하고, 결과를 확인하여라.
EXEC :AVG := f1_201507046(70);

9) 점수 65를 입력하여 함수를 실행하고, 결과를 확인하여라.
EXEC :AVG := f1_201507046(65);

10) 점수 60을 입력하여 함수를 실행하고, 결과를 확인하여라.
EXEC :AVG := f1_201507046(60);

11) 점수 55를 입력하여 함수를 실행하고, 결과를 확인하여라.
EXEC :AVG := f1_201507046(55);

12) 점수 -3을 입력하여 함수를 실행하고, 결과를 확인하여라.
EXEC :AVG := f1_201507046(-3);

PRINT AVG;

--------------------------------------------------------------------------------------------------
5. 1) SUMGDE(성적요약) 이름으로 아래의 테이블을 생성하고 구조를 확인하여라.
Create Table sumgde201507046(
no number(9) not null,
acrd number(2),
gcrd number(2),
totsco number(4,1),
avgsco number(3,2),
Primary Key(no)
);

DESC sumgde201507046;

2) 학번을 입력하여 성적요약 데이터를 성적요약 테이블에 삽입하는 프로시저를 작성하여라. 
   (4번에서 작성한 함수 이용)
Create OR REPLACE PROCEDURE p1_201507046(v_no number)
IS
	v_subno enrol201507046.subno%TYPE;
	v_grade enrol201507046.subno%TYPE;
	v_subcredit subject201507046.subcredit%TYPE;
	v_acrd sumgde201507046.acrd%TYPE := 0;
	v_gcrd sumgde201507046.gcrd%TYPE := 0;
	v_totsco sumgde201507046.totsco%TYPE := 0;
	v_avgsco sumgde201507046.avgsco%TYPE := 0;
	v_avg number := 0;
	CURSOR sangwon_cursor IS
	Select subno, grade
	From enrol201507046
	Where no = v_no;
BEGIN
	OPEN sangwon_cursor;
	LOOP
	FETCH sangwon_cursor Into v_subno, v_grade;
	EXIT WHEN sangwon_cursor%NOTFOUND;
		Select subcredit
		Into v_subcredit
		From subject201507046
		Where subno = v_subno;

		v_acrd := v_acrd + v_subcredit;
		v_avg := f1_201507046(v_grade);
		IF v_avg >= 1 THEN
			v_gcrd := v_gcrd + v_subcredit;
			v_totsco := v_totsco + v_subcredit * v_avg;
		END IF;
	END LOOP;
CLOSE sangwon_cursor;
	v_avgsco := v_totsco / v_acrd;
	
	Insert Into sumgde201507046 Values(v_no, v_acrd, v_gcrd, v_totsco, v_avgsco);
END;
/

3) 학번 20132003을 입력받아서 프로시저를 실행하고, 결과를 확인하여라.
EXEC p1_201507046(20132003);

4) 학번 20151062를 입력받아서 프로시저를 실행하고, 결과를 확인하여라.
EXEC p1_201507046(20151062);

5) 학번 20153088을 입력받아서 프로시저를 실행하고, 결과를 확인하여라.
EXEC p1_201507046(20153088);

6) 학번 20131001을 입력받아서 프로시저를 실행하고, 결과를 확인하여라.
EXEC p1_201507046(20131001);

Select * From sumgde201507046;

--------------------------------------------------------------------------------------------------
6. 1) 과목별 수강인원을 보관하는 테이블(enrolcnt)을 생성하고 구조를 확인하여라.
Create Table enrolcnt201507046(
subno char(3),
subcnt number(2)
);

DESC enrolcnt201507046;

2) 수강(enrol) 테이블로부터 수강인원을 enrolcnt 테이블에 저장하는 프로시저를  작성하여라.
Create OR REPLACE PROCEDURE p2_201507046
AS
BEGIN
	Insert into enrolcnt201507046
	Select subno, count(*)
	From enrol201507046
	Group by subno;
END;
/

3) 2)에서 생성한 프로시저를  실행하고, 결과를 확인하여라.
Select * From enrolcnt201507046;

4) 수강(enrol) 테이블이 수정될 경우(insert, update, delete),
 과목별 수강인원을 수정하는 트리거를 작성하여라.
Create OR REPLACE TRIGGER t1_201507046
AFTER INSERT or UPDATE or DELETE
ON enrol201507046
FOR EACH ROW
BEGIN
	IF Inserting THEN
		Update enrolcnt201507046
		Set subcnt =subcnt + 1
		Where subno = :new.subno;
	ELSIF Updating THEN
		Update enrolcnt201507046
		Set subcnt = subcnt - 1 
		Where subno = :old.subno;
		Update enrolcnt201507046
		Set subcnt = subcnt + 1
		Where subno = :new.subno;
	ELSIF Deleting THEN
		Update enrolcnt201507046
		Set subcnt = subcnt - 1 
		Where subno = :old.subno;
	END IF;
END;
/
	
5) 과목번호가 102 이고 학번이 20153075 인 데이터의 과목번호를 103으로 수정하는 명령어를
 실행하고, 결과를 확인하여라.
Update enrol201507046
Set subno = 103
Where subno = 102 AND no = 20153075;

Select * From enrolcnt201507046;

6) 과목번호가 103 이고 학번이 20152088 인 데이터를 삭제하는 명령어를
 실행하고, 결과를 확인하여라.
Delete From enrol201507046
Where subno = 103 AND no = 20152088;

Select * From enrolcnt201507046;

7) 과목번호가 101 이고 학번이 20153088, 점수가 45 인 데이터를 입력하는 명령어를
 실행하고, 결과를 확인하여라.
Insert Into enrol201507046 Values('101', '20153088', 45);

Select * From enrolcnt201507046;

Create OR REPLACE Package pack_201507046
IS
PROCEDURE subject(v_no number);
PROCEDURE subject(v_subno char);
END;
/

--------------------------------------------------------------------------------------------------
7. 1) 학생의 학번을 입력하면 학생들이 수강신청한 과목들의 정보(과목이름, 학점)를 출력하고,
과목번호를 입력하면 수강신청한 학생들의 신상(학번, 이름, 학과)를 출력하는 프로시저를
작성하여 패키지로 처리하여라. 
Create OR REPLACE Package BODY pack_201507046
IS
PROCEDURE subject(v_no number)
IS
	v_subname subject201507046.subname%TYPE;
	v_subcredit subject201507046.subcredit%TYPE;
	CURSOR sangwon_cursor IS
	Select s.subname, s.subcredit
	From subject201507046 s, enrol201507046 e
	Where s.subno = e.subno AND e.no = v_no;
BEGIN
	OPEN sangwon_cursor;
	LOOP
	FETCH sangwon_cursor Into v_subname, v_subcredit;
	EXIT WHEN sangwon_cursor%NOTFOUND;
	dbms_output.put_line('수강과목 : ' || v_subname);
	dbms_output.put_line('학점 : ' || v_subcredit);
	END LOOP;	
CLOSE sangwon_cursor;
END;
PROCEDURE subject(v_subno char)
IS
	v_no student201507046.no%TYPE;
	v_name student201507046.name%TYPE;
	v_dept student201507046.dept%TYPE;
	Cursor sangwon_cursor IS
	Select s.no, s.name, s.dept
	From student201507046 s, enrol201507046 e
	Where s.no = e.no AND e.subno = v_subno;
BEGIN
	OPEN sangwon_cursor;
	LOOP
	FETCH sangwon_cursor Into v_no, v_name, v_dept;
	EXIT WHEN sangwon_cursor%NOTFOUND;
	dbms_output.put_line('학번 : ' || v_no);
	dbms_output.put_line('이름 : ' || v_name);
	dbms_output.put_line('학과 : ' || v_dept);
	END LOOP;
CLOSE sangwon_cursor;
END;
END;
/

2) 학생의 학번 20153088을 입력받아서 실행하고, 결과를 확인하여라.
EXEC pack_201507046.subject(20153088);

3) 과목번호 101을 입력받아서 실행하고, 결과를 확인하여라.
EXEC pack_201507046.subject('101');
