1. 1) SALE 이름으로 아래의 테이블을 생성하여라. (실적 테이블)
Create Table sale201507046(
empno number(1) Not Null,
saledate date,
salecount number(2)
);

DESC sale201507046;

2) 치환변수를 사용하여 아래와 같이 데이터를 입력하고, 입력된 데이터를 확인하여라.
INSERT INTO sale201507046 Values(&empno, '&saledate', &salecount);

Select * From sale201507046;

--------------------------------------------------------------------------------------------------------
2. 1) SALEMAN 이름으로 아래의 테이블을 생성하여라. (사원 테이블)
Create Table saleman201507046(
empno number(1) Not Null,
ename varchar2(10),
hiredate date,
firedate date,
firekind varchar2(5)
);

2) 치환변수를 사용하여 아래와 같이 데이터를 입력하고, 입력된 데이터를 확인하여라.
INSERT INTO saleman201507046 Values(&empno, '&ename', '&hiredate', '&firedate', '&firekind');

Select * From saleman201507046;

--------------------------------------------------------------------------------------------------------
3. 1) 사원번호, 판매대수를 입력받아서 실적(sale) 테이블에 입력하는 프로시저를 작성하여라.
Create OR REPLACE PROCEDURE p1_201507046(v_empno number, v_salecount number)
IS
	v_saledate date := sysdate;
	v_firekind saleman201507046.firekind%TYPE;
	salecount_error EXCEPTION;
BEGIN
	Select firekind
	Into v_firekind
	From saleman201507046
	Where empno = v_empno;

	IF v_firekind = '퇴사' THEN
		dbms_output.put_line('퇴사한 사원입니다.');
	ELSIF v_firekind = '근무' THEN
		IF v_salecount < 1 THEN
			RAISE salecount_error;
		ELSIF v_salecount >100 THEN
			RAISE salecount_error;
		ELSE
			INSERT INTO sale201507046 Values(v_empno, v_saledate, v_salecount);
		END IF;
	END IF;
EXCEPTION
	WHEN salecount_error THEN
	dbms_output.put_line('판매대수에 에러가 있습니다.');
	WHEN NO_DATA_FOUND THEN	
	dbms_output.put_line('없는 사원 번호입니다.');
END;
/

2) 1번 사원번호, 판매대수 101을 입력받아서 프로시저를 실행하고, 결과를 확인하여라.
EXEC p1_201507046(1, 101);

3) 1번 사원번호, 판매대수 0을 입력받아서 프로시저를 실행하고, 결과를 확인하여라.
EXEC p1_201507046(1, 0);

4) 6번 사원번호, 판매대수 5를 입력받아서 프로시저를 실행하고, 결과를 확인하여라.
EXEC p1_201507046(6, 5);

5) 3번 사원번호, 판매대수 5를 입력받아서 프로시저를 실행하고, 결과를 확인하여라.
EXEC p1_201507046(3, 5);

6) 1번 사원번호, 판매대수 3을 입력받아서 프로시저를 실행하고, 결과를 확인하여라.
EXEC p1_201507046(1, 3);

--------------------------------------------------------------------------------------------------------
4. 1) 현재 근무 중인 모든 사원에게 오늘 날짜로 5대의 판매대수를 입력하는 프로시저를 작성하여라.
(데이터 입력 후 “사원번호, 사원명”을 화면에 출력하여라) 
실적(sale) 테이블에 데이터 입력은 3번 문제의 프로시저를 이용하여라.
Create OR REPLACE PROCEDURE p2_201507046
IS
	v_empno saleman201507046.empno%TYPE;
	v_ename saleman201507046.ename%TYPE;
	v_firekind saleman201507046.firekind%TYPE;
	CURSOR sangwon_cursor IS
	Select empno, ename, firekind
	From saleman201507046;
BEGIN
	OPEN sangwon_cursor;
	LOOP
		FETCH sangwon_cursor INTO v_empno, v_ename, v_firekind;
		EXIT WHEN sangwon_cursor%NOTFOUND;
	IF v_firekind = '근무' THEN
		p1_201507046(v_empno, 5);
		dbms_output.put_line('사원번호 : ' || v_empno || ' 사원명 : ' || v_ename);
	END IF;
	END LOOP;
CLOSE sangwon_cursor;
END;
/
	
2) 프로시저를 실행하고 결과를 확인하여라.
EXEC p2_201507046;

Select * From sale201507046;

--------------------------------------------------------------------------------------------------------
5. 실적(sale) 테이블에 데이터가 입력될 때 총 판매실적(totsale) 테이블에 
사원번호별로 누적실적을 변경하는 트리거를 작성하여라.

1) 총 판매실적 (totsale) 테이블 생성
Create Table totsale201507046(
empno number(1) Not Null,
totsalecount number(5)
);

DESC totsale201507046;

2) 실적테이블로부터 사원번호별로 판매대수의 합계를 가져와서 데이터를 입력하고, 입력된 데이터를 확인하여라.
INSERT INTO totsale201507046
Select empno, SUM(salecount)
From sale201507046
Group By empno;

3) 실적(sale) 테이블에 데이터가 입력될 때 총 판매실적(totsale) 테이블에
사원번호별로 누적실적을 변경하는 트리거 작성
Create OR REPLACE TRIGGER t_201507046_0521
AFTER INSERT
ON sale201507046
FOR EACH ROW
BEGIN
	Update totsale201507046
	Set totsalecount = totsalecount + :new.salecount
	Where empno = :new.empno;
END;
/	

4) 실적(sale) 테이블에 데이터 (2, sysdate, 4)를 입력하여라.
INSERT INTO sale201507046 Values(2, sysdate, 4);

5) 트리거가 수행된 것을 확인하기 위해 실적(sale) 테이블과 판매실적(totsale) 테이블의 데이터를 조회하여라.
Select * From sale201507046;
Select * From totsale201507046;

--------------------------------------------------------------------------------------------------------
6. 1) 사원번호를 입력받아서 입력된 사원번호에 해당하는 사원의 이름과 총 판매대수를
화면에 출력하는 프로시저와 사원명을 입력받아서 사원의 실적등급을 반환하는 함수를 작성하여 패키지로 생성하여라.
Create OR REPLACE PACKAGE p1_201507046_0521
IS
PROCEDURE sale(v_empno number);
FUNCTION sale(v_ename varchar)RETURN varchar;
END;
/

Create OR REPLACE PACKAGE BODY p1_201507046_0521
IS
PROCEDURE sale(v_empno number)
IS
	v_ename saleman201507046.ename%TYPE;
	v_totsalecount totsale201507046.totsalecount%TYPE;
BEGIN
	Select s.ename, t.totsalecount
	Into v_ename, v_totsalecount
	From saleman201507046 s, totsale201507046 t
	Where s.empno = t.empno AND s.empno = v_empno;

	dbms_output.put_line('사원이름 : ' || v_ename);
	dbms_output.put_line('총 판매대수 : ' || v_totsalecount);
END;
FUNCTION sale(v_ename varchar)RETURN varchar
IS
	v_grade varchar2(10);
	v_totsalecount totsale201507046.totsalecount%TYPE;
BEGIN
	Select totsalecount
	Into v_totsalecount
	From totsale201507046
	Where empno = (Select empno
		From saleman201507046
		Where ename = v_ename);
	IF v_totsalecount >= 40 THEN
		v_grade := 'A';
	ELSIF v_totsalecount >= 30 THEN
		v_grade := 'B';
	ELSIF v_totsalecount >= 20 THEN
		v_grade := 'C';
	ELSIF v_totsalecount >= 10 THEN
		v_grade := 'D';
	ELSIF v_totsalecount < 10 THEN
		v_grade := 'F';	
	END IF;
RETURN v_grade;
END sale;
END;
/

2) 사원번호 1을 입력하여 패키지를 실행하고, 결과를 확인하여라.
EXEC p1_201507046_0521.sale(1);

3) 사원명 박영우를 입력하여 패키지를 실행하고, 결과를 확인하여라.
VARIABLE GRADE VARCHAR2(10)
EXEC :GRADE := p1_201507046_0521.sale('박영우');



















